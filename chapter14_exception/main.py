'''
chapter14_exception 패키지 생성
main.py 파일 생성

1. 예외 처리의 필요성
    1) 예외 vs. 오류
        예외(exception) : 개발자가 직접 처리할 수 있는 문제
        오류(error) : 개발자가 처리할 수 없는 문제

    2) 예외 처리의 목적 :
        어떤 문제가 발생했을 때 그 문제를 해결해 주는 것이 아니라,
        발생된 문제로 인해 프로그램이 비정상적으로 종료되는 것을 막고,
        사용자에게 발생한 문제에 대해 정보를 전달하기 위함.
'''
# 2 / 0
'''
    2 / 0
    ~~^~~
ZeroDivisionError: division by zero
와 같은 방식으로 프로그램이 정상적으로 종료되지 않으며, 보기에 좋지도 않기 때문에,
예외를 처리하면 좋다.

2. 예외 처리
    1) 고전적인 예외 처리
'''
# a = int(input("나누는 수를 입력하세요 >>> "))
# b = int(input("나누어지는 수를 입력하세요 >>> "))
#
# if a == 0:
#     print("0으로 나눌 수 없습니다.")
# else:
#     print(f"b / a = {b/a}")
'''
어떤 값이든 0으로 나눌 수 없기 때문에 if a == 0을 통해 0으로 나누는 것을 아예
    시도할 수 없도록 예외 처리를 함.
    
여기서 생각할 수 있는 잠재적인 문제는 :
    1. 어떤 문제가 발생할 지 예상할 수 있어야 미리 대비할 수 있다.
    2. 어떤 문제가 발생할 지 예상할 수 있더라도 대비할 수 없는 경우가 있다.
    
    2. 예외의 종류
    
+------+---------------------+---------------------------------------------+
| 순번 |     예외 클래스     |                     의미                    |
+------+---------------------+---------------------------------------------+
|  1   |    BaseException    |              최상위 예외 클래스             |
|  2   |      Exception      |       대부분 예외 클래스의 슈퍼 클래스      |
|  3   |   ArithmeticError   |          산술 연산에 문제가 있을 때         |
|  4   |    AttributeError   |           잘못된 속성을 참조할 때           |
|  5   |       EOFError      | 파일에서 더 이상 읽어 들일 데이터가 없을 때 |
|  6   | ModuleNotFoundError |           import할 모듈이 없을 때           |
|  7   |  FileNotFoundError  |           존재하지 않는 파일일 때           |
|  8   |      IndexError     |          잘못된 인덱스를 사용할 때          |
|  9   |      NameError      |        잘못된 이름(변수)을 사용할 때        |
|  10  |     SyntaxError     |               문법이 틀렸을 때              |
|  11  |      TypeError      |   계산하려는 데이터의 유형이 잘못되었을 때  |
|  12  |      ValueError     |    계산하려는 데이터의 값이 잘못되었을 때   |
+------+---------------------+---------------------------------------------+
3. 예외 처리 방식
    1) 모든 예외를 처리하는 방식 -> try / except 문
    
    형식 :
try :
    코드 작성 영역
except :
    예외 발생 시 처리 영역
'''
# try :
#     a = int(input("나누는 수를 입력하시오 >>> "))
#     b = int(input("나누어지는 수를 입력하시오 >>> "))
#     print(f"b / a = {b / a}")
# except :
#     print("예외가 발생했습니다.")
'''
기본 예제

다음은 사용자가 입력한 키를 정수로 반올림해서 다시 저장하는 프로그램입니다.
try / except 문을 사용하여 "예외가 발생하였습니다."를 출력할 수 있도록 작성하세요.
'''
height = input("키를 입력하세요 >>> ")
height = round(height)
print(f"입력하신 키는 {height}cm로 처리됩니다.")
'''
위의 코드를 실행하면 오류가 뜨는데, 디버깅을 하지 말고, 예외처리를 통해 지시사항대로 작성하시오.
'''