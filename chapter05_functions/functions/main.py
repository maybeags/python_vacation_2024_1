'''
chapter05_functions 패키지 생성 -> main

1. 함수(Function) : 특정 작업을 수행하는 코드 블럭을 정의하는 방법

예를 들어 '사진을 찍는다'라는 행위에 대해 생각해보면,
1) 주머니에서 폰을 꺼내고,
2) 잠금 화면을 풀고,
3) 카메라를 켜고,
4) 사진을 찍고자 하는 대상에 폰을 조준하고,
5) 셔터를 누른다.

라고 볼 수 있겠습니다. 그런데 컴퓨터는 시키는대로만 하기 때문에 사진을 찍기 위해서는 1) - 5)까지의 명령어를
입력해줘야만 합니다.
하지만 '사진을 찍는다'라는 함수 내에 1) - 5)의 명령어들을 미리 입력하고 나서, '사진을 찍는다'라는 명령어를
실행시키기만 하면 1) - 5)까지의 명령을 순서대로 수행하는 것을 함수의 개념이라고 볼 수 있습니다.

주요 수업 예시로는 reeborg's world에서 turn_right()를 정의하는 방법이었습니다.

함수 정의
def turn_right():
    turn_left()
    turn_left()
    turn_left()

함수 호출
turn_right()

2. 함수의 종류
    1) 파이썬 내장 함수
    2) 메서드
    3) 사용자 함수

3. 함수 용어 정리(멘토 파이썬에도 있습니다)
    1) 함수 정의 : 사용자 함수를 새로 만드는 것을 의미(def를 떠올리셔야 합니다. def : define)
    2) 인수(argument) : 함수에 전달할 입력값(input)
    3) 매개변수(parameter) : 인수를 받아서 저장하는 변수를 의미
    4) 반환값/결과값/리턴값(return) : 함수의 출력값(output)
    5) 함수 호출(call) : 함수를 실제로 사용하는 것을 의미.

4. (사용자) 함수의 형식 :
def 함수_이름(매개변수):
    실행문

변수 = 함수_이름(argument)
'''
# # 함수 정의
# def write_name(name):
#     print(f"당신의 이름은 {name}입니다.")
# # 함수 호출
# write_name("안근수")
#
# def write_name_age(name, age):      # 매개변수가 복수인 사례 / 함수 정의
#     print(f"당신의 이름은 {name}이고, 나이는 {age}살입니다.")
#
# write_name_age("안근수", 38)
# write_name_age(age=10, name="안근순")  # 이게 python 상황에서는 매너이긴 함. keyword argument

'''
우리가 예를 들어 input("이름을 입력하세요 >>> ")을 이용해서 이것을 name  변수에 담았다고 가정하면,
name = input("이름을 입력하세요 >>> ")라고 작성해왔습니다. 즉, 저희는 여태까지 함수의 결과값을
변수에 담아오고 있었습니다.

파이썬 내장 함수는 이미 함수가 정의돼 있고, 함수 호출만 잘 하면 됩니다.
사용자 함수는 개발자 자신이 함수를 정의하고, 그 후에 호출하는 것까지의 과정이라고 생각하시면 됩니다.

내장 함수 예시
print() / type() / int() / float() / str() / input()

2. 메서드(method) : 특정 객체가 가지고 있는 함수를 의미. 특정 자료형에 포함돼있는 함수.
사실 함수와 메서드는 동일한 개념이지만, 호출 방식에 있어서의 차이가 있습니다.
함수는 독립적으로 사용이 가능하지만, 메서드는 특정 객체를 통해서만 호출 할 수 있습니다.
'''
# eng_name = input("당신의 이름을 소문자로 입력하세요. >>> ").upper()
# # input()은 함수, .upper()는 method
# print(eng_name)

'''
함수(메서드)의 유형
'''
# 매개변수 x / 리턴 x
def call1():
    print("[ x | x ]")
# 매개변수 o / 리턴 x
def call2(str_type):
    print("[ o | x ]")
# 매개변수 x / 리턴 o
def call3():
    print("[ x | o ]")
    return "안녕하세요"
# 매개변수 o / 리턴 o
def call4(str_type):
    print("[ o | o ]")
    return f"안녕하세요 제 이름은 {str_type}입니다."

call1()
call2("안근수")    # argument를 입력했지만 실행문을 확인 결과 해당 argument가 사용되지 않음
call3() # 안녕하세요는 출력되지 않음.
print(call3())    # return을 정의하는 방식에 이제 익숙해지셔야합니다.
print(call4("안근수"))

'''
call3() / call4() 유형에서 함수 내에 print()를 집어넣어두면 main 단계에서
print() 함수를 입력할 필요가 없어 훨씬 편할 것 같은데
왜 return 형태로 입력해서 main단계에서 일일이 print() 함수를 입력해야 하냐.


'''



